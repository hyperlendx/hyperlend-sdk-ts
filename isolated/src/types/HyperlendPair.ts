/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type VaultAccountStruct = { amount: BigNumberish; shares: BigNumberish };

export type VaultAccountStructOutput = [BigNumber, BigNumber] & {
  amount: BigNumber;
  shares: BigNumber;
};

export declare namespace HyperlendPairCore {
  export type CurrentRateInfoStruct = {
    lastBlock: BigNumberish;
    feeToProtocolRate: BigNumberish;
    lastTimestamp: BigNumberish;
    ratePerSec: BigNumberish;
    fullUtilizationRate: BigNumberish;
  };

  export type CurrentRateInfoStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    lastBlock: number;
    feeToProtocolRate: number;
    lastTimestamp: BigNumber;
    ratePerSec: BigNumber;
    fullUtilizationRate: BigNumber;
  };
}

export interface HyperlendPairInterface extends utils.Interface {
  functions: {
    "DEPLOYER_ADDRESS()": FunctionFragment;
    "DEVIATION_PRECISION()": FunctionFragment;
    "EXCHANGE_PRECISION()": FunctionFragment;
    "FEE_PRECISION()": FunctionFragment;
    "LIQ_PRECISION()": FunctionFragment;
    "LTV_PRECISION()": FunctionFragment;
    "MAX_PROTOCOL_FEE()": FunctionFragment;
    "RATE_PRECISION()": FunctionFragment;
    "UTIL_PREC()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "acceptTransferTimelock()": FunctionFragment;
    "addCollateral(uint256,address)": FunctionFragment;
    "addInterest(bool)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "asset()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "borrowAsset(uint256,uint256,address)": FunctionFragment;
    "borrowLimit()": FunctionFragment;
    "changeFee(uint32)": FunctionFragment;
    "circuitBreakerAddress()": FunctionFragment;
    "cleanLiquidationFee()": FunctionFragment;
    "collateralContract()": FunctionFragment;
    "convertToAssets(uint256)": FunctionFragment;
    "convertToShares(uint256)": FunctionFragment;
    "currentRateInfo()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "depositLimit()": FunctionFragment;
    "dirtyLiquidationFee()": FunctionFragment;
    "exchangeRateInfo()": FunctionFragment;
    "getConstants()": FunctionFragment;
    "getPairAccounting()": FunctionFragment;
    "getUserSnapshot(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isBorrowAccessControlRevoked()": FunctionFragment;
    "isDepositAccessControlRevoked()": FunctionFragment;
    "isInterestAccessControlRevoked()": FunctionFragment;
    "isInterestPaused()": FunctionFragment;
    "isLiquidateAccessControlRevoked()": FunctionFragment;
    "isLiquidatePaused()": FunctionFragment;
    "isLiquidationFeeSetterRevoked()": FunctionFragment;
    "isMaxLTVSetterRevoked()": FunctionFragment;
    "isOracleSetterRevoked()": FunctionFragment;
    "isRateContractSetterRevoked()": FunctionFragment;
    "isRepayAccessControlRevoked()": FunctionFragment;
    "isRepayPaused()": FunctionFragment;
    "isWithdrawAccessControlRevoked()": FunctionFragment;
    "isWithdrawPaused()": FunctionFragment;
    "leveragedPosition(address,uint256,uint256,uint256,address[])": FunctionFragment;
    "liquidate(uint128,uint256,address)": FunctionFragment;
    "maxDeposit(address)": FunctionFragment;
    "maxLTV()": FunctionFragment;
    "maxMint(address)": FunctionFragment;
    "maxRedeem(address)": FunctionFragment;
    "maxWithdraw(address)": FunctionFragment;
    "mint(uint256,address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "pauseBorrow()": FunctionFragment;
    "pauseDeposit()": FunctionFragment;
    "pauseInterest(bool)": FunctionFragment;
    "pauseLiquidate(bool)": FunctionFragment;
    "pauseRepay(bool)": FunctionFragment;
    "pauseWithdraw(bool)": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "pendingTimelockAddress()": FunctionFragment;
    "previewAddInterest()": FunctionFragment;
    "previewDeposit(uint256)": FunctionFragment;
    "previewMint(uint256)": FunctionFragment;
    "previewRedeem(uint256)": FunctionFragment;
    "previewWithdraw(uint256)": FunctionFragment;
    "pricePerShare()": FunctionFragment;
    "protocolLiquidationFee()": FunctionFragment;
    "rateContract()": FunctionFragment;
    "redeem(uint256,address,address)": FunctionFragment;
    "removeCollateral(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceTimelock()": FunctionFragment;
    "repayAsset(uint256,address)": FunctionFragment;
    "repayAssetWithCollateral(address,uint256,uint256,address[])": FunctionFragment;
    "revokeBorrowLimitAccessControl(uint256)": FunctionFragment;
    "revokeDepositLimitAccessControl(uint256)": FunctionFragment;
    "revokeInterestAccessControl()": FunctionFragment;
    "revokeLiquidateAccessControl()": FunctionFragment;
    "revokeLiquidationFeeSetter()": FunctionFragment;
    "revokeMaxLTVSetter()": FunctionFragment;
    "revokeOracleInfoSetter()": FunctionFragment;
    "revokeRateContractSetter()": FunctionFragment;
    "revokeRepayAccessControl()": FunctionFragment;
    "revokeWithdrawAccessControl()": FunctionFragment;
    "setBorrowLimit(uint256)": FunctionFragment;
    "setCircuitBreaker(address)": FunctionFragment;
    "setDepositLimit(uint256)": FunctionFragment;
    "setLiquidationFees(uint256,uint256,uint256)": FunctionFragment;
    "setMaxLTV(uint256)": FunctionFragment;
    "setOracle(address,uint32)": FunctionFragment;
    "setRateContract(address)": FunctionFragment;
    "setSwapper(address,bool)": FunctionFragment;
    "swappers(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "timelockAddress()": FunctionFragment;
    "toAssetAmount(uint256,bool,bool)": FunctionFragment;
    "toAssetShares(uint256,bool,bool)": FunctionFragment;
    "toBorrowAmount(uint256,bool,bool)": FunctionFragment;
    "toBorrowShares(uint256,bool,bool)": FunctionFragment;
    "totalAsset()": FunctionFragment;
    "totalAssets()": FunctionFragment;
    "totalBorrow()": FunctionFragment;
    "totalCollateral()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTimelock(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateExchangeRate()": FunctionFragment;
    "userBorrowShares(address)": FunctionFragment;
    "userCollateralBalance(address)": FunctionFragment;
    "version()": FunctionFragment;
    "withdraw(uint256,address,address)": FunctionFragment;
    "withdrawFees(uint128,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEPLOYER_ADDRESS"
      | "DEVIATION_PRECISION"
      | "EXCHANGE_PRECISION"
      | "FEE_PRECISION"
      | "LIQ_PRECISION"
      | "LTV_PRECISION"
      | "MAX_PROTOCOL_FEE"
      | "RATE_PRECISION"
      | "UTIL_PREC"
      | "acceptOwnership"
      | "acceptTransferTimelock"
      | "addCollateral"
      | "addInterest"
      | "allowance"
      | "approve"
      | "asset"
      | "balanceOf"
      | "borrowAsset"
      | "borrowLimit"
      | "changeFee"
      | "circuitBreakerAddress"
      | "cleanLiquidationFee"
      | "collateralContract"
      | "convertToAssets"
      | "convertToShares"
      | "currentRateInfo"
      | "decimals"
      | "decreaseAllowance"
      | "deposit"
      | "depositLimit"
      | "dirtyLiquidationFee"
      | "exchangeRateInfo"
      | "getConstants"
      | "getPairAccounting"
      | "getUserSnapshot"
      | "increaseAllowance"
      | "isBorrowAccessControlRevoked"
      | "isDepositAccessControlRevoked"
      | "isInterestAccessControlRevoked"
      | "isInterestPaused"
      | "isLiquidateAccessControlRevoked"
      | "isLiquidatePaused"
      | "isLiquidationFeeSetterRevoked"
      | "isMaxLTVSetterRevoked"
      | "isOracleSetterRevoked"
      | "isRateContractSetterRevoked"
      | "isRepayAccessControlRevoked"
      | "isRepayPaused"
      | "isWithdrawAccessControlRevoked"
      | "isWithdrawPaused"
      | "leveragedPosition"
      | "liquidate"
      | "maxDeposit"
      | "maxLTV"
      | "maxMint"
      | "maxRedeem"
      | "maxWithdraw"
      | "mint"
      | "name"
      | "owner"
      | "pause"
      | "pauseBorrow"
      | "pauseDeposit"
      | "pauseInterest"
      | "pauseLiquidate"
      | "pauseRepay"
      | "pauseWithdraw"
      | "pendingOwner"
      | "pendingTimelockAddress"
      | "previewAddInterest"
      | "previewDeposit"
      | "previewMint"
      | "previewRedeem"
      | "previewWithdraw"
      | "pricePerShare"
      | "protocolLiquidationFee"
      | "rateContract"
      | "redeem"
      | "removeCollateral"
      | "renounceOwnership"
      | "renounceTimelock"
      | "repayAsset"
      | "repayAssetWithCollateral"
      | "revokeBorrowLimitAccessControl"
      | "revokeDepositLimitAccessControl"
      | "revokeInterestAccessControl"
      | "revokeLiquidateAccessControl"
      | "revokeLiquidationFeeSetter"
      | "revokeMaxLTVSetter"
      | "revokeOracleInfoSetter"
      | "revokeRateContractSetter"
      | "revokeRepayAccessControl"
      | "revokeWithdrawAccessControl"
      | "setBorrowLimit"
      | "setCircuitBreaker"
      | "setDepositLimit"
      | "setLiquidationFees"
      | "setMaxLTV"
      | "setOracle"
      | "setRateContract"
      | "setSwapper"
      | "swappers"
      | "symbol"
      | "timelockAddress"
      | "toAssetAmount"
      | "toAssetShares"
      | "toBorrowAmount"
      | "toBorrowShares"
      | "totalAsset"
      | "totalAssets"
      | "totalBorrow"
      | "totalCollateral"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferOwnership"
      | "transferTimelock"
      | "unpause"
      | "updateExchangeRate"
      | "userBorrowShares"
      | "userCollateralBalance"
      | "version"
      | "withdraw"
      | "withdrawFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEPLOYER_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEVIATION_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXCHANGE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LIQ_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LTV_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PROTOCOL_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RATE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "UTIL_PREC", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTransferTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCollateral",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addInterest",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "borrowAsset",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "circuitBreakerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cleanLiquidationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRateInfo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dirtyLiquidationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exchangeRateInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConstants",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPairAccounting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSnapshot",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBorrowAccessControlRevoked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDepositAccessControlRevoked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInterestAccessControlRevoked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isInterestPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidateAccessControlRevoked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidatePaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidationFeeSetterRevoked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isMaxLTVSetterRevoked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOracleSetterRevoked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRateContractSetterRevoked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRepayAccessControlRevoked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRepayPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawAccessControlRevoked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isWithdrawPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leveragedPosition",
    values: [string, BigNumberish, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "maxDeposit", values: [string]): string;
  encodeFunctionData(functionFragment: "maxLTV", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxMint", values: [string]): string;
  encodeFunctionData(functionFragment: "maxRedeem", values: [string]): string;
  encodeFunctionData(functionFragment: "maxWithdraw", values: [string]): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauseInterest",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseLiquidate",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "pauseRepay", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "pauseWithdraw",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingTimelockAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previewAddInterest",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pricePerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolLiquidationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rateContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCollateral",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceTimelock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repayAsset",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "repayAssetWithCollateral",
    values: [string, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeBorrowLimitAccessControl",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeDepositLimitAccessControl",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeInterestAccessControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLiquidateAccessControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeLiquidationFeeSetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeMaxLTVSetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOracleInfoSetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRateContractSetter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRepayAccessControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeWithdrawAccessControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBorrowLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCircuitBreaker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidationFees",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxLTV",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRateContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapper",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "swappers", values: [string]): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timelockAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toAssetAmount",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toAssetShares",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toBorrowAmount",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toBorrowShares",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBorrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTimelock",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateExchangeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userBorrowShares",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userCollateralBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEPLOYER_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEVIATION_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXCHANGE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LIQ_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LTV_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PROTOCOL_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RATE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "UTIL_PREC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTransferTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "circuitBreakerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cleanLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dirtyLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangeRateInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getConstants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairAccounting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSnapshot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBorrowAccessControlRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDepositAccessControlRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInterestAccessControlRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInterestPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidateAccessControlRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidationFeeSetterRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMaxLTVSetterRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOracleSetterRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRateContractSetterRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRepayAccessControlRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isRepayPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawAccessControlRevoked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWithdrawPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "leveragedPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxLTV", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauseLiquidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauseRepay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingTimelockAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewAddInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolLiquidationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayAssetWithCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeBorrowLimitAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeDepositLimitAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeInterestAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeLiquidateAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeLiquidationFeeSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeMaxLTVSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOracleInfoSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRateContractSetter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRepayAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeWithdrawAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBorrowLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCircuitBreaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidationFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMaxLTV", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRateContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSwapper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swappers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timelockAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toAssetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toAssetShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toBorrowAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toBorrowShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalAsset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBorrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTimelock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userBorrowShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCollateralBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;

  events: {
    "AddCollateral(address,address,uint256)": EventFragment;
    "AddInterest(uint256,uint256,uint256,uint256)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "BorrowAsset(address,address,uint256,uint256)": EventFragment;
    "ChangeFee(uint32)": EventFragment;
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "LeveragedPosition(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "Liquidate(address,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PauseInterest(bool)": EventFragment;
    "PauseLiquidate(bool)": EventFragment;
    "PauseRepay(bool)": EventFragment;
    "PauseWithdraw(bool)": EventFragment;
    "RemoveCollateral(address,uint256,address,address)": EventFragment;
    "RepayAsset(address,address,uint256,uint256)": EventFragment;
    "RepayAssetWithCollateral(address,address,uint256,uint256,uint256)": EventFragment;
    "RevokeBorrowAccessControl(uint256)": EventFragment;
    "RevokeDepositAccessControl(uint256)": EventFragment;
    "RevokeInterestAccessControl()": EventFragment;
    "RevokeLiquidateAccessControl()": EventFragment;
    "RevokeLiquidationFeeSetter()": EventFragment;
    "RevokeMaxLTVSetter()": EventFragment;
    "RevokeOracleInfoSetter()": EventFragment;
    "RevokeRateContractSetter()": EventFragment;
    "RevokeRepayAccessControl()": EventFragment;
    "RevokeWithdrawAccessControl()": EventFragment;
    "SetBorrowLimit(uint256)": EventFragment;
    "SetCircuitBreaker(address,address)": EventFragment;
    "SetDepositLimit(uint256)": EventFragment;
    "SetLiquidationFees(uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "SetMaxLTV(uint256,uint256)": EventFragment;
    "SetOracleInfo(address,uint32,address,uint32)": EventFragment;
    "SetRateContract(address,address)": EventFragment;
    "SetSwapper(address,bool)": EventFragment;
    "TimelockTransferStarted(address,address)": EventFragment;
    "TimelockTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateExchangeRate(uint256,uint256)": EventFragment;
    "UpdateRate(uint256,uint256,uint256,uint256)": EventFragment;
    "WarnOracleData(address)": EventFragment;
    "Withdraw(address,address,address,uint256,uint256)": EventFragment;
    "WithdrawFees(uint128,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddInterest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeveragedPosition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseInterest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseLiquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseRepay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauseWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayAsset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepayAssetWithCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeBorrowAccessControl"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeDepositAccessControl"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RevokeInterestAccessControl"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RevokeLiquidateAccessControl"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeLiquidationFeeSetter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeMaxLTVSetter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeOracleInfoSetter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeRateContractSetter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeRepayAccessControl"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RevokeWithdrawAccessControl"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBorrowLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCircuitBreaker"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDepositLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLiquidationFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxLTV"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetOracleInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRateContract"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSwapper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimelockTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimelockTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateExchangeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WarnOracleData"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawFees"): EventFragment;
}

export interface AddCollateralEventObject {
  sender: string;
  borrower: string;
  collateralAmount: BigNumber;
}
export type AddCollateralEvent = TypedEvent<
  [string, string, BigNumber],
  AddCollateralEventObject
>;

export type AddCollateralEventFilter = TypedEventFilter<AddCollateralEvent>;

export interface AddInterestEventObject {
  interestEarned: BigNumber;
  rate: BigNumber;
  feesAmount: BigNumber;
  feesShare: BigNumber;
}
export type AddInterestEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  AddInterestEventObject
>;

export type AddInterestEventFilter = TypedEventFilter<AddInterestEvent>;

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BorrowAssetEventObject {
  _borrower: string;
  _receiver: string;
  _borrowAmount: BigNumber;
  _sharesAdded: BigNumber;
}
export type BorrowAssetEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  BorrowAssetEventObject
>;

export type BorrowAssetEventFilter = TypedEventFilter<BorrowAssetEvent>;

export interface ChangeFeeEventObject {
  newFee: number;
}
export type ChangeFeeEvent = TypedEvent<[number], ChangeFeeEventObject>;

export type ChangeFeeEventFilter = TypedEventFilter<ChangeFeeEvent>;

export interface DepositEventObject {
  caller: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface LeveragedPositionEventObject {
  _borrower: string;
  _swapperAddress: string;
  _borrowAmount: BigNumber;
  _borrowShares: BigNumber;
  _initialCollateralAmount: BigNumber;
  _amountCollateralOut: BigNumber;
}
export type LeveragedPositionEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  LeveragedPositionEventObject
>;

export type LeveragedPositionEventFilter =
  TypedEventFilter<LeveragedPositionEvent>;

export interface LiquidateEventObject {
  _borrower: string;
  _collateralForLiquidator: BigNumber;
  _sharesToLiquidate: BigNumber;
  _amountLiquidatorToRepay: BigNumber;
  _feesAmount: BigNumber;
  _sharesToAdjust: BigNumber;
  _amountToAdjust: BigNumber;
}
export type LiquidateEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  LiquidateEventObject
>;

export type LiquidateEventFilter = TypedEventFilter<LiquidateEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PauseInterestEventObject {
  isPaused: boolean;
}
export type PauseInterestEvent = TypedEvent<
  [boolean],
  PauseInterestEventObject
>;

export type PauseInterestEventFilter = TypedEventFilter<PauseInterestEvent>;

export interface PauseLiquidateEventObject {
  isPaused: boolean;
}
export type PauseLiquidateEvent = TypedEvent<
  [boolean],
  PauseLiquidateEventObject
>;

export type PauseLiquidateEventFilter = TypedEventFilter<PauseLiquidateEvent>;

export interface PauseRepayEventObject {
  isPaused: boolean;
}
export type PauseRepayEvent = TypedEvent<[boolean], PauseRepayEventObject>;

export type PauseRepayEventFilter = TypedEventFilter<PauseRepayEvent>;

export interface PauseWithdrawEventObject {
  isPaused: boolean;
}
export type PauseWithdrawEvent = TypedEvent<
  [boolean],
  PauseWithdrawEventObject
>;

export type PauseWithdrawEventFilter = TypedEventFilter<PauseWithdrawEvent>;

export interface RemoveCollateralEventObject {
  _sender: string;
  _collateralAmount: BigNumber;
  _receiver: string;
  _borrower: string;
}
export type RemoveCollateralEvent = TypedEvent<
  [string, BigNumber, string, string],
  RemoveCollateralEventObject
>;

export type RemoveCollateralEventFilter =
  TypedEventFilter<RemoveCollateralEvent>;

export interface RepayAssetEventObject {
  payer: string;
  borrower: string;
  amountToRepay: BigNumber;
  shares: BigNumber;
}
export type RepayAssetEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RepayAssetEventObject
>;

export type RepayAssetEventFilter = TypedEventFilter<RepayAssetEvent>;

export interface RepayAssetWithCollateralEventObject {
  _borrower: string;
  _swapperAddress: string;
  _collateralToSwap: BigNumber;
  _amountAssetOut: BigNumber;
  _sharesRepaid: BigNumber;
}
export type RepayAssetWithCollateralEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  RepayAssetWithCollateralEventObject
>;

export type RepayAssetWithCollateralEventFilter =
  TypedEventFilter<RepayAssetWithCollateralEvent>;

export interface RevokeBorrowAccessControlEventObject {
  borrowLimit: BigNumber;
}
export type RevokeBorrowAccessControlEvent = TypedEvent<
  [BigNumber],
  RevokeBorrowAccessControlEventObject
>;

export type RevokeBorrowAccessControlEventFilter =
  TypedEventFilter<RevokeBorrowAccessControlEvent>;

export interface RevokeDepositAccessControlEventObject {
  depositLimit: BigNumber;
}
export type RevokeDepositAccessControlEvent = TypedEvent<
  [BigNumber],
  RevokeDepositAccessControlEventObject
>;

export type RevokeDepositAccessControlEventFilter =
  TypedEventFilter<RevokeDepositAccessControlEvent>;

export interface RevokeInterestAccessControlEventObject {}
export type RevokeInterestAccessControlEvent = TypedEvent<
  [],
  RevokeInterestAccessControlEventObject
>;

export type RevokeInterestAccessControlEventFilter =
  TypedEventFilter<RevokeInterestAccessControlEvent>;

export interface RevokeLiquidateAccessControlEventObject {}
export type RevokeLiquidateAccessControlEvent = TypedEvent<
  [],
  RevokeLiquidateAccessControlEventObject
>;

export type RevokeLiquidateAccessControlEventFilter =
  TypedEventFilter<RevokeLiquidateAccessControlEvent>;

export interface RevokeLiquidationFeeSetterEventObject {}
export type RevokeLiquidationFeeSetterEvent = TypedEvent<
  [],
  RevokeLiquidationFeeSetterEventObject
>;

export type RevokeLiquidationFeeSetterEventFilter =
  TypedEventFilter<RevokeLiquidationFeeSetterEvent>;

export interface RevokeMaxLTVSetterEventObject {}
export type RevokeMaxLTVSetterEvent = TypedEvent<
  [],
  RevokeMaxLTVSetterEventObject
>;

export type RevokeMaxLTVSetterEventFilter =
  TypedEventFilter<RevokeMaxLTVSetterEvent>;

export interface RevokeOracleInfoSetterEventObject {}
export type RevokeOracleInfoSetterEvent = TypedEvent<
  [],
  RevokeOracleInfoSetterEventObject
>;

export type RevokeOracleInfoSetterEventFilter =
  TypedEventFilter<RevokeOracleInfoSetterEvent>;

export interface RevokeRateContractSetterEventObject {}
export type RevokeRateContractSetterEvent = TypedEvent<
  [],
  RevokeRateContractSetterEventObject
>;

export type RevokeRateContractSetterEventFilter =
  TypedEventFilter<RevokeRateContractSetterEvent>;

export interface RevokeRepayAccessControlEventObject {}
export type RevokeRepayAccessControlEvent = TypedEvent<
  [],
  RevokeRepayAccessControlEventObject
>;

export type RevokeRepayAccessControlEventFilter =
  TypedEventFilter<RevokeRepayAccessControlEvent>;

export interface RevokeWithdrawAccessControlEventObject {}
export type RevokeWithdrawAccessControlEvent = TypedEvent<
  [],
  RevokeWithdrawAccessControlEventObject
>;

export type RevokeWithdrawAccessControlEventFilter =
  TypedEventFilter<RevokeWithdrawAccessControlEvent>;

export interface SetBorrowLimitEventObject {
  limit: BigNumber;
}
export type SetBorrowLimitEvent = TypedEvent<
  [BigNumber],
  SetBorrowLimitEventObject
>;

export type SetBorrowLimitEventFilter = TypedEventFilter<SetBorrowLimitEvent>;

export interface SetCircuitBreakerEventObject {
  oldCircuitBreaker: string;
  newCircuitBreaker: string;
}
export type SetCircuitBreakerEvent = TypedEvent<
  [string, string],
  SetCircuitBreakerEventObject
>;

export type SetCircuitBreakerEventFilter =
  TypedEventFilter<SetCircuitBreakerEvent>;

export interface SetDepositLimitEventObject {
  limit: BigNumber;
}
export type SetDepositLimitEvent = TypedEvent<
  [BigNumber],
  SetDepositLimitEventObject
>;

export type SetDepositLimitEventFilter = TypedEventFilter<SetDepositLimitEvent>;

export interface SetLiquidationFeesEventObject {
  oldCleanLiquidationFee: BigNumber;
  oldDirtyLiquidationFee: BigNumber;
  oldProtocolLiquidationFee: BigNumber;
  newCleanLiquidationFee: BigNumber;
  newDirtyLiquidationFee: BigNumber;
  newProtocolLiquidationFee: BigNumber;
}
export type SetLiquidationFeesEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  SetLiquidationFeesEventObject
>;

export type SetLiquidationFeesEventFilter =
  TypedEventFilter<SetLiquidationFeesEvent>;

export interface SetMaxLTVEventObject {
  oldMaxLTV: BigNumber;
  newMaxLTV: BigNumber;
}
export type SetMaxLTVEvent = TypedEvent<
  [BigNumber, BigNumber],
  SetMaxLTVEventObject
>;

export type SetMaxLTVEventFilter = TypedEventFilter<SetMaxLTVEvent>;

export interface SetOracleInfoEventObject {
  oldOracle: string;
  oldMaxOracleDeviation: number;
  newOracle: string;
  newMaxOracleDeviation: number;
}
export type SetOracleInfoEvent = TypedEvent<
  [string, number, string, number],
  SetOracleInfoEventObject
>;

export type SetOracleInfoEventFilter = TypedEventFilter<SetOracleInfoEvent>;

export interface SetRateContractEventObject {
  oldRateContract: string;
  newRateContract: string;
}
export type SetRateContractEvent = TypedEvent<
  [string, string],
  SetRateContractEventObject
>;

export type SetRateContractEventFilter = TypedEventFilter<SetRateContractEvent>;

export interface SetSwapperEventObject {
  swapper: string;
  approval: boolean;
}
export type SetSwapperEvent = TypedEvent<
  [string, boolean],
  SetSwapperEventObject
>;

export type SetSwapperEventFilter = TypedEventFilter<SetSwapperEvent>;

export interface TimelockTransferStartedEventObject {
  previousTimelock: string;
  newTimelock: string;
}
export type TimelockTransferStartedEvent = TypedEvent<
  [string, string],
  TimelockTransferStartedEventObject
>;

export type TimelockTransferStartedEventFilter =
  TypedEventFilter<TimelockTransferStartedEvent>;

export interface TimelockTransferredEventObject {
  previousTimelock: string;
  newTimelock: string;
}
export type TimelockTransferredEvent = TypedEvent<
  [string, string],
  TimelockTransferredEventObject
>;

export type TimelockTransferredEventFilter =
  TypedEventFilter<TimelockTransferredEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UpdateExchangeRateEventObject {
  lowExchangeRate: BigNumber;
  highExchangeRate: BigNumber;
}
export type UpdateExchangeRateEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateExchangeRateEventObject
>;

export type UpdateExchangeRateEventFilter =
  TypedEventFilter<UpdateExchangeRateEvent>;

export interface UpdateRateEventObject {
  oldRatePerSec: BigNumber;
  oldFullUtilizationRate: BigNumber;
  newRatePerSec: BigNumber;
  newFullUtilizationRate: BigNumber;
}
export type UpdateRateEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  UpdateRateEventObject
>;

export type UpdateRateEventFilter = TypedEventFilter<UpdateRateEvent>;

export interface WarnOracleDataEventObject {
  oracle: string;
}
export type WarnOracleDataEvent = TypedEvent<
  [string],
  WarnOracleDataEventObject
>;

export type WarnOracleDataEventFilter = TypedEventFilter<WarnOracleDataEvent>;

export interface WithdrawEventObject {
  caller: string;
  receiver: string;
  owner: string;
  assets: BigNumber;
  shares: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface WithdrawFeesEventObject {
  shares: BigNumber;
  recipient: string;
  amountToTransfer: BigNumber;
  collateralAmount: BigNumber;
}
export type WithdrawFeesEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  WithdrawFeesEventObject
>;

export type WithdrawFeesEventFilter = TypedEventFilter<WithdrawFeesEvent>;

export interface HyperlendPair extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HyperlendPairInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEPLOYER_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    DEVIATION_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    EXCHANGE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    FEE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    LIQ_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    LTV_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PROTOCOL_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    RATE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    UTIL_PREC(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    acceptTransferTimelock(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addCollateral(
      _collateralAmount: BigNumberish,
      _borrower: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addInterest(
      _returnAccounting: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    asset(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowAsset(
      _borrowAmount: BigNumberish,
      _collateralAmount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    borrowLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    changeFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    circuitBreakerAddress(overrides?: CallOverrides): Promise<[string]>;

    cleanLiquidationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralContract(overrides?: CallOverrides): Promise<[string]>;

    convertToAssets(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _assets: BigNumber }>;

    convertToShares(
      _assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _shares: BigNumber }>;

    currentRateInfo(
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber, BigNumber] & {
        lastBlock: number;
        feeToProtocolRate: number;
        lastTimestamp: BigNumber;
        ratePerSec: BigNumber;
        fullUtilizationRate: BigNumber;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    dirtyLiquidationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    exchangeRateInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, BigNumber] & {
        oracle: string;
        maxOracleDeviation: number;
        lastTimestamp: BigNumber;
        lowExchangeRate: BigNumber;
        highExchangeRate: BigNumber;
      }
    >;

    getConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _LTV_PRECISION: BigNumber;
        _LIQ_PRECISION: BigNumber;
        _UTIL_PREC: BigNumber;
        _FEE_PRECISION: BigNumber;
        _EXCHANGE_PRECISION: BigNumber;
        _DEVIATION_PRECISION: BigNumber;
        _RATE_PRECISION: BigNumber;
        _MAX_PROTOCOL_FEE: BigNumber;
      }
    >;

    getPairAccounting(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _totalAssetAmount: BigNumber;
        _totalAssetShares: BigNumber;
        _totalBorrowAmount: BigNumber;
        _totalBorrowShares: BigNumber;
        _totalCollateral: BigNumber;
      }
    >;

    getUserSnapshot(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _userAssetShares: BigNumber;
        _userBorrowShares: BigNumber;
        _userCollateralBalance: BigNumber;
      }
    >;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isBorrowAccessControlRevoked(overrides?: CallOverrides): Promise<[boolean]>;

    isDepositAccessControlRevoked(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInterestAccessControlRevoked(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isInterestPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isLiquidateAccessControlRevoked(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isLiquidatePaused(overrides?: CallOverrides): Promise<[boolean]>;

    isLiquidationFeeSetterRevoked(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMaxLTVSetterRevoked(overrides?: CallOverrides): Promise<[boolean]>;

    isOracleSetterRevoked(overrides?: CallOverrides): Promise<[boolean]>;

    isRateContractSetterRevoked(overrides?: CallOverrides): Promise<[boolean]>;

    isRepayAccessControlRevoked(overrides?: CallOverrides): Promise<[boolean]>;

    isRepayPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isWithdrawAccessControlRevoked(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWithdrawPaused(overrides?: CallOverrides): Promise<[boolean]>;

    leveragedPosition(
      _swapperAddress: string,
      _borrowAmount: BigNumberish,
      _initialCollateralAmount: BigNumberish,
      _amountCollateralOutMin: BigNumberish,
      _path: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    liquidate(
      _sharesToLiquidate: BigNumberish,
      _deadline: BigNumberish,
      _borrower: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    maxDeposit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _maxAssets: BigNumber }>;

    maxLTV(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxMint(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _maxShares: BigNumber }>;

    maxRedeem(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _maxShares: BigNumber }>;

    maxWithdraw(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _maxAssets: BigNumber }>;

    mint(
      _shares: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pauseBorrow(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pauseDeposit(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pauseInterest(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pauseLiquidate(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pauseRepay(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pauseWithdraw(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    pendingTimelockAddress(overrides?: CallOverrides): Promise<[string]>;

    previewAddInterest(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        HyperlendPairCore.CurrentRateInfoStructOutput,
        VaultAccountStructOutput,
        VaultAccountStructOutput
      ] & {
        _interestEarned: BigNumber;
        _feesAmount: BigNumber;
        _feesShare: BigNumber;
        _newCurrentRateInfo: HyperlendPairCore.CurrentRateInfoStructOutput;
        _totalAsset: VaultAccountStructOutput;
        _totalBorrow: VaultAccountStructOutput;
      }
    >;

    previewDeposit(
      _assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _sharesReceived: BigNumber }>;

    previewMint(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    previewRedeem(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _assets: BigNumber }>;

    previewWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _sharesToBurn: BigNumber }>;

    pricePerShare(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    protocolLiquidationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    rateContract(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      _shares: BigNumberish,
      _receiver: string,
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeCollateral(
      _collateralAmount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceTimelock(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    repayAsset(
      _shares: BigNumberish,
      _borrower: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    repayAssetWithCollateral(
      _swapperAddress: string,
      _collateralToSwap: BigNumberish,
      _amountAssetOutMin: BigNumberish,
      _path: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeBorrowLimitAccessControl(
      _borrowLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeDepositLimitAccessControl(
      _depositLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeInterestAccessControl(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeLiquidateAccessControl(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeLiquidationFeeSetter(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeMaxLTVSetter(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeOracleInfoSetter(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRateContractSetter(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeRepayAccessControl(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    revokeWithdrawAccessControl(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBorrowLimit(
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCircuitBreaker(
      _newCircuitBreaker: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDepositLimit(
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setLiquidationFees(
      _newCleanLiquidationFee: BigNumberish,
      _newDirtyLiquidationFee: BigNumberish,
      _newProtocolLiquidationFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setMaxLTV(
      _newMaxLTV: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOracle(
      _newOracle: string,
      _newMaxOracleDeviation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRateContract(
      _newRateContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSwapper(
      _swapper: string,
      _approval: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    swappers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    timelockAddress(overrides?: CallOverrides): Promise<[string]>;

    toAssetAmount(
      _shares: BigNumberish,
      _roundUp: boolean,
      _previewInterest: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    toAssetShares(
      _amount: BigNumberish,
      _roundUp: boolean,
      _previewInterest: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _shares: BigNumber }>;

    toBorrowAmount(
      _shares: BigNumberish,
      _roundUp: boolean,
      _previewInterest: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _amount: BigNumber }>;

    toBorrowShares(
      _amount: BigNumberish,
      _roundUp: boolean,
      _previewInterest: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _shares: BigNumber }>;

    totalAsset(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; shares: BigNumber }
    >;

    totalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBorrow(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; shares: BigNumber }
    >;

    totalCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferTimelock(
      _newTimelock: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateExchangeRate(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userBorrowShares(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userCollateralBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    version(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _major: BigNumber;
        _minor: BigNumber;
        _patch: BigNumber;
      }
    >;

    withdraw(
      _amount: BigNumberish,
      _receiver: string,
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawFees(
      _shares: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DEPLOYER_ADDRESS(overrides?: CallOverrides): Promise<string>;

  DEVIATION_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  EXCHANGE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  FEE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  LIQ_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  LTV_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  UTIL_PREC(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  acceptTransferTimelock(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addCollateral(
    _collateralAmount: BigNumberish,
    _borrower: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addInterest(
    _returnAccounting: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  asset(overrides?: CallOverrides): Promise<string>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  borrowAsset(
    _borrowAmount: BigNumberish,
    _collateralAmount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  borrowLimit(overrides?: CallOverrides): Promise<BigNumber>;

  changeFee(
    _newFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  circuitBreakerAddress(overrides?: CallOverrides): Promise<string>;

  cleanLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

  collateralContract(overrides?: CallOverrides): Promise<string>;

  convertToAssets(
    _shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertToShares(
    _assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentRateInfo(
    overrides?: CallOverrides
  ): Promise<
    [number, number, BigNumber, BigNumber, BigNumber] & {
      lastBlock: number;
      feeToProtocolRate: number;
      lastTimestamp: BigNumber;
      ratePerSec: BigNumber;
      fullUtilizationRate: BigNumber;
    }
  >;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

  dirtyLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

  exchangeRateInfo(
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber, BigNumber, BigNumber] & {
      oracle: string;
      maxOracleDeviation: number;
      lastTimestamp: BigNumber;
      lowExchangeRate: BigNumber;
      highExchangeRate: BigNumber;
    }
  >;

  getConstants(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      _LTV_PRECISION: BigNumber;
      _LIQ_PRECISION: BigNumber;
      _UTIL_PREC: BigNumber;
      _FEE_PRECISION: BigNumber;
      _EXCHANGE_PRECISION: BigNumber;
      _DEVIATION_PRECISION: BigNumber;
      _RATE_PRECISION: BigNumber;
      _MAX_PROTOCOL_FEE: BigNumber;
    }
  >;

  getPairAccounting(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      _totalAssetAmount: BigNumber;
      _totalAssetShares: BigNumber;
      _totalBorrowAmount: BigNumber;
      _totalBorrowShares: BigNumber;
      _totalCollateral: BigNumber;
    }
  >;

  getUserSnapshot(
    _address: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _userAssetShares: BigNumber;
      _userBorrowShares: BigNumber;
      _userCollateralBalance: BigNumber;
    }
  >;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isBorrowAccessControlRevoked(overrides?: CallOverrides): Promise<boolean>;

  isDepositAccessControlRevoked(overrides?: CallOverrides): Promise<boolean>;

  isInterestAccessControlRevoked(overrides?: CallOverrides): Promise<boolean>;

  isInterestPaused(overrides?: CallOverrides): Promise<boolean>;

  isLiquidateAccessControlRevoked(overrides?: CallOverrides): Promise<boolean>;

  isLiquidatePaused(overrides?: CallOverrides): Promise<boolean>;

  isLiquidationFeeSetterRevoked(overrides?: CallOverrides): Promise<boolean>;

  isMaxLTVSetterRevoked(overrides?: CallOverrides): Promise<boolean>;

  isOracleSetterRevoked(overrides?: CallOverrides): Promise<boolean>;

  isRateContractSetterRevoked(overrides?: CallOverrides): Promise<boolean>;

  isRepayAccessControlRevoked(overrides?: CallOverrides): Promise<boolean>;

  isRepayPaused(overrides?: CallOverrides): Promise<boolean>;

  isWithdrawAccessControlRevoked(overrides?: CallOverrides): Promise<boolean>;

  isWithdrawPaused(overrides?: CallOverrides): Promise<boolean>;

  leveragedPosition(
    _swapperAddress: string,
    _borrowAmount: BigNumberish,
    _initialCollateralAmount: BigNumberish,
    _amountCollateralOutMin: BigNumberish,
    _path: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  liquidate(
    _sharesToLiquidate: BigNumberish,
    _deadline: BigNumberish,
    _borrower: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxLTV(overrides?: CallOverrides): Promise<BigNumber>;

  maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxRedeem(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  maxWithdraw(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  mint(
    _shares: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pauseBorrow(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pauseDeposit(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pauseInterest(
    _isPaused: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pauseLiquidate(
    _isPaused: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pauseRepay(
    _isPaused: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pauseWithdraw(
    _isPaused: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  pendingTimelockAddress(overrides?: CallOverrides): Promise<string>;

  previewAddInterest(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      HyperlendPairCore.CurrentRateInfoStructOutput,
      VaultAccountStructOutput,
      VaultAccountStructOutput
    ] & {
      _interestEarned: BigNumber;
      _feesAmount: BigNumber;
      _feesShare: BigNumber;
      _newCurrentRateInfo: HyperlendPairCore.CurrentRateInfoStructOutput;
      _totalAsset: VaultAccountStructOutput;
      _totalBorrow: VaultAccountStructOutput;
    }
  >;

  previewDeposit(
    _assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewMint(
    _shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewRedeem(
    _shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  previewWithdraw(
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

  protocolLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

  rateContract(overrides?: CallOverrides): Promise<string>;

  redeem(
    _shares: BigNumberish,
    _receiver: string,
    _owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeCollateral(
    _collateralAmount: BigNumberish,
    _receiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceTimelock(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  repayAsset(
    _shares: BigNumberish,
    _borrower: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  repayAssetWithCollateral(
    _swapperAddress: string,
    _collateralToSwap: BigNumberish,
    _amountAssetOutMin: BigNumberish,
    _path: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeBorrowLimitAccessControl(
    _borrowLimit: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeDepositLimitAccessControl(
    _depositLimit: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeInterestAccessControl(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeLiquidateAccessControl(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeLiquidationFeeSetter(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeMaxLTVSetter(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeOracleInfoSetter(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRateContractSetter(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeRepayAccessControl(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  revokeWithdrawAccessControl(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBorrowLimit(
    _limit: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCircuitBreaker(
    _newCircuitBreaker: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDepositLimit(
    _limit: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setLiquidationFees(
    _newCleanLiquidationFee: BigNumberish,
    _newDirtyLiquidationFee: BigNumberish,
    _newProtocolLiquidationFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setMaxLTV(
    _newMaxLTV: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOracle(
    _newOracle: string,
    _newMaxOracleDeviation: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRateContract(
    _newRateContract: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSwapper(
    _swapper: string,
    _approval: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  swappers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  timelockAddress(overrides?: CallOverrides): Promise<string>;

  toAssetAmount(
    _shares: BigNumberish,
    _roundUp: boolean,
    _previewInterest: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toAssetShares(
    _amount: BigNumberish,
    _roundUp: boolean,
    _previewInterest: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toBorrowAmount(
    _shares: BigNumberish,
    _roundUp: boolean,
    _previewInterest: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toBorrowShares(
    _amount: BigNumberish,
    _roundUp: boolean,
    _previewInterest: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  totalAsset(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; shares: BigNumber }>;

  totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  totalBorrow(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { amount: BigNumber; shares: BigNumber }>;

  totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferTimelock(
    _newTimelock: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateExchangeRate(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userBorrowShares(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userCollateralBalance(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  version(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      _major: BigNumber;
      _minor: BigNumber;
      _patch: BigNumber;
    }
  >;

  withdraw(
    _amount: BigNumberish,
    _receiver: string,
    _owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawFees(
    _shares: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEPLOYER_ADDRESS(overrides?: CallOverrides): Promise<string>;

    DEVIATION_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    EXCHANGE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    LIQ_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    LTV_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    UTIL_PREC(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    acceptTransferTimelock(overrides?: CallOverrides): Promise<void>;

    addCollateral(
      _collateralAmount: BigNumberish,
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addInterest(
      _returnAccounting: boolean,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        HyperlendPairCore.CurrentRateInfoStructOutput,
        VaultAccountStructOutput,
        VaultAccountStructOutput
      ] & {
        _interestEarned: BigNumber;
        _feesAmount: BigNumber;
        _feesShare: BigNumber;
        _currentRateInfo: HyperlendPairCore.CurrentRateInfoStructOutput;
        _totalAsset: VaultAccountStructOutput;
        _totalBorrow: VaultAccountStructOutput;
      }
    >;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    asset(overrides?: CallOverrides): Promise<string>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowAsset(
      _borrowAmount: BigNumberish,
      _collateralAmount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    borrowLimit(overrides?: CallOverrides): Promise<BigNumber>;

    changeFee(_newFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    circuitBreakerAddress(overrides?: CallOverrides): Promise<string>;

    cleanLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    collateralContract(overrides?: CallOverrides): Promise<string>;

    convertToAssets(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      _assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRateInfo(
      overrides?: CallOverrides
    ): Promise<
      [number, number, BigNumber, BigNumber, BigNumber] & {
        lastBlock: number;
        feeToProtocolRate: number;
        lastTimestamp: BigNumber;
        ratePerSec: BigNumber;
        fullUtilizationRate: BigNumber;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      _amount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    dirtyLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateInfo(
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber, BigNumber, BigNumber] & {
        oracle: string;
        maxOracleDeviation: number;
        lastTimestamp: BigNumber;
        lowExchangeRate: BigNumber;
        highExchangeRate: BigNumber;
      }
    >;

    getConstants(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        _LTV_PRECISION: BigNumber;
        _LIQ_PRECISION: BigNumber;
        _UTIL_PREC: BigNumber;
        _FEE_PRECISION: BigNumber;
        _EXCHANGE_PRECISION: BigNumber;
        _DEVIATION_PRECISION: BigNumber;
        _RATE_PRECISION: BigNumber;
        _MAX_PROTOCOL_FEE: BigNumber;
      }
    >;

    getPairAccounting(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        _totalAssetAmount: BigNumber;
        _totalAssetShares: BigNumber;
        _totalBorrowAmount: BigNumber;
        _totalBorrowShares: BigNumber;
        _totalCollateral: BigNumber;
      }
    >;

    getUserSnapshot(
      _address: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _userAssetShares: BigNumber;
        _userBorrowShares: BigNumber;
        _userCollateralBalance: BigNumber;
      }
    >;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBorrowAccessControlRevoked(overrides?: CallOverrides): Promise<boolean>;

    isDepositAccessControlRevoked(overrides?: CallOverrides): Promise<boolean>;

    isInterestAccessControlRevoked(overrides?: CallOverrides): Promise<boolean>;

    isInterestPaused(overrides?: CallOverrides): Promise<boolean>;

    isLiquidateAccessControlRevoked(
      overrides?: CallOverrides
    ): Promise<boolean>;

    isLiquidatePaused(overrides?: CallOverrides): Promise<boolean>;

    isLiquidationFeeSetterRevoked(overrides?: CallOverrides): Promise<boolean>;

    isMaxLTVSetterRevoked(overrides?: CallOverrides): Promise<boolean>;

    isOracleSetterRevoked(overrides?: CallOverrides): Promise<boolean>;

    isRateContractSetterRevoked(overrides?: CallOverrides): Promise<boolean>;

    isRepayAccessControlRevoked(overrides?: CallOverrides): Promise<boolean>;

    isRepayPaused(overrides?: CallOverrides): Promise<boolean>;

    isWithdrawAccessControlRevoked(overrides?: CallOverrides): Promise<boolean>;

    isWithdrawPaused(overrides?: CallOverrides): Promise<boolean>;

    leveragedPosition(
      _swapperAddress: string,
      _borrowAmount: BigNumberish,
      _initialCollateralAmount: BigNumberish,
      _amountCollateralOutMin: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      _sharesToLiquidate: BigNumberish,
      _deadline: BigNumberish,
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxLTV(overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _shares: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    pauseBorrow(overrides?: CallOverrides): Promise<void>;

    pauseDeposit(overrides?: CallOverrides): Promise<void>;

    pauseInterest(_isPaused: boolean, overrides?: CallOverrides): Promise<void>;

    pauseLiquidate(
      _isPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseRepay(_isPaused: boolean, overrides?: CallOverrides): Promise<void>;

    pauseWithdraw(_isPaused: boolean, overrides?: CallOverrides): Promise<void>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    pendingTimelockAddress(overrides?: CallOverrides): Promise<string>;

    previewAddInterest(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        HyperlendPairCore.CurrentRateInfoStructOutput,
        VaultAccountStructOutput,
        VaultAccountStructOutput
      ] & {
        _interestEarned: BigNumber;
        _feesAmount: BigNumber;
        _feesShare: BigNumber;
        _newCurrentRateInfo: HyperlendPairCore.CurrentRateInfoStructOutput;
        _totalAsset: VaultAccountStructOutput;
        _totalBorrow: VaultAccountStructOutput;
      }
    >;

    previewDeposit(
      _assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    protocolLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    rateContract(overrides?: CallOverrides): Promise<string>;

    redeem(
      _shares: BigNumberish,
      _receiver: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCollateral(
      _collateralAmount: BigNumberish,
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceTimelock(overrides?: CallOverrides): Promise<void>;

    repayAsset(
      _shares: BigNumberish,
      _borrower: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayAssetWithCollateral(
      _swapperAddress: string,
      _collateralToSwap: BigNumberish,
      _amountAssetOutMin: BigNumberish,
      _path: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeBorrowLimitAccessControl(
      _borrowLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeDepositLimitAccessControl(
      _depositLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeInterestAccessControl(overrides?: CallOverrides): Promise<void>;

    revokeLiquidateAccessControl(overrides?: CallOverrides): Promise<void>;

    revokeLiquidationFeeSetter(overrides?: CallOverrides): Promise<void>;

    revokeMaxLTVSetter(overrides?: CallOverrides): Promise<void>;

    revokeOracleInfoSetter(overrides?: CallOverrides): Promise<void>;

    revokeRateContractSetter(overrides?: CallOverrides): Promise<void>;

    revokeRepayAccessControl(overrides?: CallOverrides): Promise<void>;

    revokeWithdrawAccessControl(overrides?: CallOverrides): Promise<void>;

    setBorrowLimit(
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCircuitBreaker(
      _newCircuitBreaker: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDepositLimit(
      _limit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidationFees(
      _newCleanLiquidationFee: BigNumberish,
      _newDirtyLiquidationFee: BigNumberish,
      _newProtocolLiquidationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxLTV(
      _newMaxLTV: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(
      _newOracle: string,
      _newMaxOracleDeviation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRateContract(
      _newRateContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapper(
      _swapper: string,
      _approval: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    swappers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    timelockAddress(overrides?: CallOverrides): Promise<string>;

    toAssetAmount(
      _shares: BigNumberish,
      _roundUp: boolean,
      _previewInterest: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toAssetShares(
      _amount: BigNumberish,
      _roundUp: boolean,
      _previewInterest: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toBorrowAmount(
      _shares: BigNumberish,
      _roundUp: boolean,
      _previewInterest: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toBorrowShares(
      _amount: BigNumberish,
      _roundUp: boolean,
      _previewInterest: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAsset(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; shares: BigNumber }
    >;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrow(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount: BigNumber; shares: BigNumber }
    >;

    totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTimelock(
      _newTimelock: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateExchangeRate(
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, BigNumber] & {
        _isBorrowAllowed: boolean;
        _lowExchangeRate: BigNumber;
        _highExchangeRate: BigNumber;
      }
    >;

    userBorrowShares(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userCollateralBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _major: BigNumber;
        _minor: BigNumber;
        _patch: BigNumber;
      }
    >;

    withdraw(
      _amount: BigNumberish,
      _receiver: string,
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFees(
      _shares: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AddCollateral(address,address,uint256)"(
      sender?: string | null,
      borrower?: string | null,
      collateralAmount?: null
    ): AddCollateralEventFilter;
    AddCollateral(
      sender?: string | null,
      borrower?: string | null,
      collateralAmount?: null
    ): AddCollateralEventFilter;

    "AddInterest(uint256,uint256,uint256,uint256)"(
      interestEarned?: null,
      rate?: null,
      feesAmount?: null,
      feesShare?: null
    ): AddInterestEventFilter;
    AddInterest(
      interestEarned?: null,
      rate?: null,
      feesAmount?: null,
      feesShare?: null
    ): AddInterestEventFilter;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "BorrowAsset(address,address,uint256,uint256)"(
      _borrower?: string | null,
      _receiver?: string | null,
      _borrowAmount?: null,
      _sharesAdded?: null
    ): BorrowAssetEventFilter;
    BorrowAsset(
      _borrower?: string | null,
      _receiver?: string | null,
      _borrowAmount?: null,
      _sharesAdded?: null
    ): BorrowAssetEventFilter;

    "ChangeFee(uint32)"(newFee?: null): ChangeFeeEventFilter;
    ChangeFee(newFee?: null): ChangeFeeEventFilter;

    "Deposit(address,address,uint256,uint256)"(
      caller?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;
    Deposit(
      caller?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): DepositEventFilter;

    "LeveragedPosition(address,address,uint256,uint256,uint256,uint256)"(
      _borrower?: string | null,
      _swapperAddress?: null,
      _borrowAmount?: null,
      _borrowShares?: null,
      _initialCollateralAmount?: null,
      _amountCollateralOut?: null
    ): LeveragedPositionEventFilter;
    LeveragedPosition(
      _borrower?: string | null,
      _swapperAddress?: null,
      _borrowAmount?: null,
      _borrowShares?: null,
      _initialCollateralAmount?: null,
      _amountCollateralOut?: null
    ): LeveragedPositionEventFilter;

    "Liquidate(address,uint256,uint256,uint256,uint256,uint256,uint256)"(
      _borrower?: string | null,
      _collateralForLiquidator?: null,
      _sharesToLiquidate?: null,
      _amountLiquidatorToRepay?: null,
      _feesAmount?: null,
      _sharesToAdjust?: null,
      _amountToAdjust?: null
    ): LiquidateEventFilter;
    Liquidate(
      _borrower?: string | null,
      _collateralForLiquidator?: null,
      _sharesToLiquidate?: null,
      _amountLiquidatorToRepay?: null,
      _feesAmount?: null,
      _sharesToAdjust?: null,
      _amountToAdjust?: null
    ): LiquidateEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "PauseInterest(bool)"(isPaused?: null): PauseInterestEventFilter;
    PauseInterest(isPaused?: null): PauseInterestEventFilter;

    "PauseLiquidate(bool)"(isPaused?: null): PauseLiquidateEventFilter;
    PauseLiquidate(isPaused?: null): PauseLiquidateEventFilter;

    "PauseRepay(bool)"(isPaused?: null): PauseRepayEventFilter;
    PauseRepay(isPaused?: null): PauseRepayEventFilter;

    "PauseWithdraw(bool)"(isPaused?: null): PauseWithdrawEventFilter;
    PauseWithdraw(isPaused?: null): PauseWithdrawEventFilter;

    "RemoveCollateral(address,uint256,address,address)"(
      _sender?: string | null,
      _collateralAmount?: null,
      _receiver?: string | null,
      _borrower?: string | null
    ): RemoveCollateralEventFilter;
    RemoveCollateral(
      _sender?: string | null,
      _collateralAmount?: null,
      _receiver?: string | null,
      _borrower?: string | null
    ): RemoveCollateralEventFilter;

    "RepayAsset(address,address,uint256,uint256)"(
      payer?: string | null,
      borrower?: string | null,
      amountToRepay?: null,
      shares?: null
    ): RepayAssetEventFilter;
    RepayAsset(
      payer?: string | null,
      borrower?: string | null,
      amountToRepay?: null,
      shares?: null
    ): RepayAssetEventFilter;

    "RepayAssetWithCollateral(address,address,uint256,uint256,uint256)"(
      _borrower?: string | null,
      _swapperAddress?: null,
      _collateralToSwap?: null,
      _amountAssetOut?: null,
      _sharesRepaid?: null
    ): RepayAssetWithCollateralEventFilter;
    RepayAssetWithCollateral(
      _borrower?: string | null,
      _swapperAddress?: null,
      _collateralToSwap?: null,
      _amountAssetOut?: null,
      _sharesRepaid?: null
    ): RepayAssetWithCollateralEventFilter;

    "RevokeBorrowAccessControl(uint256)"(
      borrowLimit?: null
    ): RevokeBorrowAccessControlEventFilter;
    RevokeBorrowAccessControl(
      borrowLimit?: null
    ): RevokeBorrowAccessControlEventFilter;

    "RevokeDepositAccessControl(uint256)"(
      depositLimit?: null
    ): RevokeDepositAccessControlEventFilter;
    RevokeDepositAccessControl(
      depositLimit?: null
    ): RevokeDepositAccessControlEventFilter;

    "RevokeInterestAccessControl()"(): RevokeInterestAccessControlEventFilter;
    RevokeInterestAccessControl(): RevokeInterestAccessControlEventFilter;

    "RevokeLiquidateAccessControl()"(): RevokeLiquidateAccessControlEventFilter;
    RevokeLiquidateAccessControl(): RevokeLiquidateAccessControlEventFilter;

    "RevokeLiquidationFeeSetter()"(): RevokeLiquidationFeeSetterEventFilter;
    RevokeLiquidationFeeSetter(): RevokeLiquidationFeeSetterEventFilter;

    "RevokeMaxLTVSetter()"(): RevokeMaxLTVSetterEventFilter;
    RevokeMaxLTVSetter(): RevokeMaxLTVSetterEventFilter;

    "RevokeOracleInfoSetter()"(): RevokeOracleInfoSetterEventFilter;
    RevokeOracleInfoSetter(): RevokeOracleInfoSetterEventFilter;

    "RevokeRateContractSetter()"(): RevokeRateContractSetterEventFilter;
    RevokeRateContractSetter(): RevokeRateContractSetterEventFilter;

    "RevokeRepayAccessControl()"(): RevokeRepayAccessControlEventFilter;
    RevokeRepayAccessControl(): RevokeRepayAccessControlEventFilter;

    "RevokeWithdrawAccessControl()"(): RevokeWithdrawAccessControlEventFilter;
    RevokeWithdrawAccessControl(): RevokeWithdrawAccessControlEventFilter;

    "SetBorrowLimit(uint256)"(limit?: null): SetBorrowLimitEventFilter;
    SetBorrowLimit(limit?: null): SetBorrowLimitEventFilter;

    "SetCircuitBreaker(address,address)"(
      oldCircuitBreaker?: null,
      newCircuitBreaker?: null
    ): SetCircuitBreakerEventFilter;
    SetCircuitBreaker(
      oldCircuitBreaker?: null,
      newCircuitBreaker?: null
    ): SetCircuitBreakerEventFilter;

    "SetDepositLimit(uint256)"(limit?: null): SetDepositLimitEventFilter;
    SetDepositLimit(limit?: null): SetDepositLimitEventFilter;

    "SetLiquidationFees(uint256,uint256,uint256,uint256,uint256,uint256)"(
      oldCleanLiquidationFee?: null,
      oldDirtyLiquidationFee?: null,
      oldProtocolLiquidationFee?: null,
      newCleanLiquidationFee?: null,
      newDirtyLiquidationFee?: null,
      newProtocolLiquidationFee?: null
    ): SetLiquidationFeesEventFilter;
    SetLiquidationFees(
      oldCleanLiquidationFee?: null,
      oldDirtyLiquidationFee?: null,
      oldProtocolLiquidationFee?: null,
      newCleanLiquidationFee?: null,
      newDirtyLiquidationFee?: null,
      newProtocolLiquidationFee?: null
    ): SetLiquidationFeesEventFilter;

    "SetMaxLTV(uint256,uint256)"(
      oldMaxLTV?: null,
      newMaxLTV?: null
    ): SetMaxLTVEventFilter;
    SetMaxLTV(oldMaxLTV?: null, newMaxLTV?: null): SetMaxLTVEventFilter;

    "SetOracleInfo(address,uint32,address,uint32)"(
      oldOracle?: null,
      oldMaxOracleDeviation?: null,
      newOracle?: null,
      newMaxOracleDeviation?: null
    ): SetOracleInfoEventFilter;
    SetOracleInfo(
      oldOracle?: null,
      oldMaxOracleDeviation?: null,
      newOracle?: null,
      newMaxOracleDeviation?: null
    ): SetOracleInfoEventFilter;

    "SetRateContract(address,address)"(
      oldRateContract?: null,
      newRateContract?: null
    ): SetRateContractEventFilter;
    SetRateContract(
      oldRateContract?: null,
      newRateContract?: null
    ): SetRateContractEventFilter;

    "SetSwapper(address,bool)"(
      swapper?: null,
      approval?: null
    ): SetSwapperEventFilter;
    SetSwapper(swapper?: null, approval?: null): SetSwapperEventFilter;

    "TimelockTransferStarted(address,address)"(
      previousTimelock?: string | null,
      newTimelock?: string | null
    ): TimelockTransferStartedEventFilter;
    TimelockTransferStarted(
      previousTimelock?: string | null,
      newTimelock?: string | null
    ): TimelockTransferStartedEventFilter;

    "TimelockTransferred(address,address)"(
      previousTimelock?: string | null,
      newTimelock?: string | null
    ): TimelockTransferredEventFilter;
    TimelockTransferred(
      previousTimelock?: string | null,
      newTimelock?: string | null
    ): TimelockTransferredEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "UpdateExchangeRate(uint256,uint256)"(
      lowExchangeRate?: null,
      highExchangeRate?: null
    ): UpdateExchangeRateEventFilter;
    UpdateExchangeRate(
      lowExchangeRate?: null,
      highExchangeRate?: null
    ): UpdateExchangeRateEventFilter;

    "UpdateRate(uint256,uint256,uint256,uint256)"(
      oldRatePerSec?: null,
      oldFullUtilizationRate?: null,
      newRatePerSec?: null,
      newFullUtilizationRate?: null
    ): UpdateRateEventFilter;
    UpdateRate(
      oldRatePerSec?: null,
      oldFullUtilizationRate?: null,
      newRatePerSec?: null,
      newFullUtilizationRate?: null
    ): UpdateRateEventFilter;

    "WarnOracleData(address)"(oracle?: null): WarnOracleDataEventFilter;
    WarnOracleData(oracle?: null): WarnOracleDataEventFilter;

    "Withdraw(address,address,address,uint256,uint256)"(
      caller?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;
    Withdraw(
      caller?: string | null,
      receiver?: string | null,
      owner?: string | null,
      assets?: null,
      shares?: null
    ): WithdrawEventFilter;

    "WithdrawFees(uint128,address,uint256,uint256)"(
      shares?: null,
      recipient?: null,
      amountToTransfer?: null,
      collateralAmount?: null
    ): WithdrawFeesEventFilter;
    WithdrawFees(
      shares?: null,
      recipient?: null,
      amountToTransfer?: null,
      collateralAmount?: null
    ): WithdrawFeesEventFilter;
  };

  estimateGas: {
    DEPLOYER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    DEVIATION_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    EXCHANGE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    LIQ_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    LTV_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PROTOCOL_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    RATE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    UTIL_PREC(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    acceptTransferTimelock(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addCollateral(
      _collateralAmount: BigNumberish,
      _borrower: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addInterest(
      _returnAccounting: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    asset(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    borrowAsset(
      _borrowAmount: BigNumberish,
      _collateralAmount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    borrowLimit(overrides?: CallOverrides): Promise<BigNumber>;

    changeFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    circuitBreakerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    cleanLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    collateralContract(overrides?: CallOverrides): Promise<BigNumber>;

    convertToAssets(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertToShares(
      _assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRateInfo(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositLimit(overrides?: CallOverrides): Promise<BigNumber>;

    dirtyLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    exchangeRateInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getConstants(overrides?: CallOverrides): Promise<BigNumber>;

    getPairAccounting(overrides?: CallOverrides): Promise<BigNumber>;

    getUserSnapshot(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isBorrowAccessControlRevoked(overrides?: CallOverrides): Promise<BigNumber>;

    isDepositAccessControlRevoked(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInterestAccessControlRevoked(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isInterestPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isLiquidateAccessControlRevoked(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isLiquidatePaused(overrides?: CallOverrides): Promise<BigNumber>;

    isLiquidationFeeSetterRevoked(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMaxLTVSetterRevoked(overrides?: CallOverrides): Promise<BigNumber>;

    isOracleSetterRevoked(overrides?: CallOverrides): Promise<BigNumber>;

    isRateContractSetterRevoked(overrides?: CallOverrides): Promise<BigNumber>;

    isRepayAccessControlRevoked(overrides?: CallOverrides): Promise<BigNumber>;

    isRepayPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isWithdrawAccessControlRevoked(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWithdrawPaused(overrides?: CallOverrides): Promise<BigNumber>;

    leveragedPosition(
      _swapperAddress: string,
      _borrowAmount: BigNumberish,
      _initialCollateralAmount: BigNumberish,
      _amountCollateralOutMin: BigNumberish,
      _path: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    liquidate(
      _sharesToLiquidate: BigNumberish,
      _deadline: BigNumberish,
      _borrower: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    maxDeposit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxLTV(overrides?: CallOverrides): Promise<BigNumber>;

    maxMint(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxRedeem(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxWithdraw(_owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _shares: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    pauseBorrow(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    pauseDeposit(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    pauseInterest(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pauseLiquidate(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pauseRepay(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pauseWithdraw(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingTimelockAddress(overrides?: CallOverrides): Promise<BigNumber>;

    previewAddInterest(overrides?: CallOverrides): Promise<BigNumber>;

    previewDeposit(
      _assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewMint(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewRedeem(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    previewWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pricePerShare(overrides?: CallOverrides): Promise<BigNumber>;

    protocolLiquidationFee(overrides?: CallOverrides): Promise<BigNumber>;

    rateContract(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _shares: BigNumberish,
      _receiver: string,
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeCollateral(
      _collateralAmount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceTimelock(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    repayAsset(
      _shares: BigNumberish,
      _borrower: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    repayAssetWithCollateral(
      _swapperAddress: string,
      _collateralToSwap: BigNumberish,
      _amountAssetOutMin: BigNumberish,
      _path: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeBorrowLimitAccessControl(
      _borrowLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeDepositLimitAccessControl(
      _depositLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeInterestAccessControl(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeLiquidateAccessControl(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeLiquidationFeeSetter(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeMaxLTVSetter(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeOracleInfoSetter(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRateContractSetter(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeRepayAccessControl(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    revokeWithdrawAccessControl(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBorrowLimit(
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCircuitBreaker(
      _newCircuitBreaker: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDepositLimit(
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setLiquidationFees(
      _newCleanLiquidationFee: BigNumberish,
      _newDirtyLiquidationFee: BigNumberish,
      _newProtocolLiquidationFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setMaxLTV(
      _newMaxLTV: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOracle(
      _newOracle: string,
      _newMaxOracleDeviation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRateContract(
      _newRateContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSwapper(
      _swapper: string,
      _approval: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    swappers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    timelockAddress(overrides?: CallOverrides): Promise<BigNumber>;

    toAssetAmount(
      _shares: BigNumberish,
      _roundUp: boolean,
      _previewInterest: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toAssetShares(
      _amount: BigNumberish,
      _roundUp: boolean,
      _previewInterest: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toBorrowAmount(
      _shares: BigNumberish,
      _roundUp: boolean,
      _previewInterest: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toBorrowShares(
      _amount: BigNumberish,
      _roundUp: boolean,
      _previewInterest: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalAsset(overrides?: CallOverrides): Promise<BigNumber>;

    totalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    totalBorrow(overrides?: CallOverrides): Promise<BigNumber>;

    totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferTimelock(
      _newTimelock: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    updateExchangeRate(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userBorrowShares(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userCollateralBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      _receiver: string,
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawFees(
      _shares: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEPLOYER_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEVIATION_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EXCHANGE_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    FEE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQ_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LTV_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PROTOCOL_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RATE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UTIL_PREC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    acceptTransferTimelock(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addCollateral(
      _collateralAmount: BigNumberish,
      _borrower: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addInterest(
      _returnAccounting: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowAsset(
      _borrowAmount: BigNumberish,
      _collateralAmount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    borrowLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeFee(
      _newFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    circuitBreakerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cleanLiquidationFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToAssets(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertToShares(
      _assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRateInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dirtyLiquidationFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchangeRateInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConstants(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPairAccounting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserSnapshot(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isBorrowAccessControlRevoked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDepositAccessControlRevoked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInterestAccessControlRevoked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isInterestPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLiquidateAccessControlRevoked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isLiquidatePaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLiquidationFeeSetterRevoked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMaxLTVSetterRevoked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOracleSetterRevoked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRateContractSetterRevoked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRepayAccessControlRevoked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRepayPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isWithdrawAccessControlRevoked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWithdrawPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leveragedPosition(
      _swapperAddress: string,
      _borrowAmount: BigNumberish,
      _initialCollateralAmount: BigNumberish,
      _amountCollateralOutMin: BigNumberish,
      _path: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    liquidate(
      _sharesToLiquidate: BigNumberish,
      _deadline: BigNumberish,
      _borrower: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    maxDeposit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxLTV(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMint(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxRedeem(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxWithdraw(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      _shares: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pauseBorrow(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pauseDeposit(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pauseInterest(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pauseLiquidate(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pauseRepay(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pauseWithdraw(
      _isPaused: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTimelockAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewAddInterest(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewDeposit(
      _assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewMint(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewRedeem(
      _shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    previewWithdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pricePerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolLiquidationFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rateContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _shares: BigNumberish,
      _receiver: string,
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeCollateral(
      _collateralAmount: BigNumberish,
      _receiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceTimelock(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repayAsset(
      _shares: BigNumberish,
      _borrower: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repayAssetWithCollateral(
      _swapperAddress: string,
      _collateralToSwap: BigNumberish,
      _amountAssetOutMin: BigNumberish,
      _path: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeBorrowLimitAccessControl(
      _borrowLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeDepositLimitAccessControl(
      _depositLimit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeInterestAccessControl(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeLiquidateAccessControl(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeLiquidationFeeSetter(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeMaxLTVSetter(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeOracleInfoSetter(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRateContractSetter(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeRepayAccessControl(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    revokeWithdrawAccessControl(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBorrowLimit(
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCircuitBreaker(
      _newCircuitBreaker: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDepositLimit(
      _limit: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setLiquidationFees(
      _newCleanLiquidationFee: BigNumberish,
      _newDirtyLiquidationFee: BigNumberish,
      _newProtocolLiquidationFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setMaxLTV(
      _newMaxLTV: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOracle(
      _newOracle: string,
      _newMaxOracleDeviation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRateContract(
      _newRateContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSwapper(
      _swapper: string,
      _approval: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    swappers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelockAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toAssetAmount(
      _shares: BigNumberish,
      _roundUp: boolean,
      _previewInterest: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toAssetShares(
      _amount: BigNumberish,
      _roundUp: boolean,
      _previewInterest: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBorrowAmount(
      _shares: BigNumberish,
      _roundUp: boolean,
      _previewInterest: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBorrowShares(
      _amount: BigNumberish,
      _roundUp: boolean,
      _previewInterest: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBorrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferTimelock(
      _newTimelock: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateExchangeRate(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userBorrowShares(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userCollateralBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      _receiver: string,
      _owner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      _shares: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
